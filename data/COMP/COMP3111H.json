{
  "course": {
    "id": 221,
    "subject": "COMP",
    "code": "3111H",
    "name": "Honors Software Engineering",
    "description": "General methodologies, techniques, and tools for planning, designing, implementing, validating, and maintaining large-scale software systems. Collaborative development environment, automatic static analysis, and testing techniques. Open source project development methodologies and techniques.",
    "categories": [],
    "website": null,
    "credits": 4,
    "semesters": [
      2310,
      2210,
      2110,
      2010,
      1910,
      1810,
      1710,
      1610,
      1510,
      1410
    ],
    "prerequisites": "Grade A- or above in <a class=\"course-link\" data-subject=\"COMP\" data-code=\"2012\" href=\"/review/COMP2012\" target=\"_blank\">COMP 2012</a> / <a class=\"course-link\" data-subject=\"COMP\" data-code=\"2012H\" href=\"/review/COMP2012H\" target=\"_blank\">COMP 2012H</a>",
    "corequisites": "",
    "exclusions": "<a class=\"course-link\" data-subject=\"COMP\" data-code=\"3111\" href=\"/review/COMP3111\" target=\"_blank\">COMP 3111</a>, <a class=\"course-link\" data-subject=\"ISOM\" data-code=\"3210\" href=\"/review/ISOM3210\" target=\"_blank\">ISOM 3210</a>",
    "rating_content": 3.29,
    "rating_teaching": 3.86,
    "rating_grading": 3.71,
    "rating_workload": 3.71,
    "review_count": 7,
    "single_review": false,
    "enrollment_status": 3,
    "is_favourited": false,
    "is_subscribed": false,
    "user_review_hash": "",
    "contributor_has_more": false,
    "instructors": [
      {
        "id": 124,
        "name": "LEUNG, Wai Ting",
        "count": 4
      },
      {
        "id": 96,
        "name": "KIM, Sung Hun",
        "count": 3
      }
    ]
  },
  "reviews": [
    {
      "hash": "aAK2cfIms2IT7bp1ChJTnuiZgcj2q5p4",
      "semester": "2023-24 Fall",
      "instructors": [
        {
          "id": 124,
          "name": "LEUNG, Wai Ting",
          "rating": 0
        }
      ],
      "author": "151044",
      "date": "Dec 11, 2023",
      "title": "The Epitome of Mismanagement; or, a &quot;Real View&quot; of the Software Engineering Industry",
      "comment_content": "Warning/TLDR: The Honors designation does not matter here aside from extra project requirements. Stay away if the same people are teaching. (This also goes for CPEG students, who should stay away at all costs). <br /><br />The course content attempts to cover important methodologies and methods about Software Engineering, but with varying levels of success for different topics.<br /><br /> A short topics list for Lectures: <br />UML Modelling <br />Software Development Methodologies <br />Modelling: Domain and Use-Case Modelling <br />Functional and Nonfunctional Requirements Capture <br />Implementation (Refactoring and Debugging) <br />Testing (Unit, Integration, and Systems) <br />Design Patterns <br /><br />While I appreciate the importance of these topics, the way they are presented and examined is completely irrelevant to our future work. One of the (correct) MC answers was &quot;the UML diagram allows us to think about the world in a certain way&quot;. Another one is &quot;They help novices act like experts&quot;. Why are these things we must memorize to take the exam (as it appears on the exam verbatim), when any reasonable examination for a software engineering course should focus on an application of the principles taught? I have absolutely no idea. <br /><br />Labs attempted to teach you the basics of the tools needed to do the project, but with insufficient examples, poor documentation, and completely useless learning activities (the final lab had you write a reflection of &gt;250 words about &quot;what you have learnt in the labs&quot;. What is this, LANG?). More on the lab quality in Teaching.<br /><br />The project, apart from being mismanaged, requires an impressively wide skill set even if you are not doing the Honors version of the project. It requires fluent Java (COMP 3021), GUI Programming (in Swing or JavaFX) (COMP 3021) and Algorithms (COMP 3711). While I am fortunate enough to use Java as my main programming language, and have taken COMP 3711 in the previous term, the requirements are unreasonable for a course with COMP 2012(H) as prerequisite. It is unreasonable for the teaching team to expect us to have all these skills to finish the project, while giving us next to no guidance. <br /><br />Overall, a large portion of the contents were either useless, vague and broad without much applicability, blatantly wrong, or far out of the scope of this course.",
      "comment_teaching": "For Kenneth&#039;s lecture teaching, I do not have much to complain about. It&#039;s acceptable, covers the main points, and gives you the answers you need. He is also willing to answer your questions after class and is responsive to student queries by email - which I do appreciate. He did extend the deadline of the project due to popular demand, which is quite nice of him as well. <br /><br />However, the project destroyed any goodwill I had for this course. Even though the lecture teaching is around a C, the project is an F---- (or XF, if you agree that the teaching team cheated us out of a reasonable software engineering course). The teaching team demonstrated the importance of software engineering methodologies in project planning... by making an utter mess of the project to be the best counterexample you&#039;ll ever need. <br /><br />The project issues caused by the teaching team can be broken down into three categories: Mismanagement, Outdated and Poor Practices, and General Language Competency Issues. <br /><br />The teaching team mismanaged the project so poorly that they had to revise the specification for it five times (and once in November, when people should at least be halfway through it). The original specification, uploaded in early September, was riddled with errors and inconsistencies. Aside from the grammatical mistakes, the most important problem was flipping the character that the user controlled.<br /><br />In response to this, the teaching team released a &quot;correction notice&quot; which only changed the wording but not the logic of the specification. But this change does not only change the sprites of the game. Rather, it fundamentally changes the logic behind the game. Despite having updated the specification again, the lead IA, Eden Wong, refused to release it for some reason that only he can comprehend. One of our fellow classmates (on his own volition) created an additional clarifications document after repeatedly meeting with the teaching team, but this document, along with other miscellaneous changes, was never announced via email, nor Canvas. This reflects the lack of professionalism from the entire teaching team.<br /><br />The last amendment to the grading scheme is done three days before the extended deadline, and it changes the unit testing grading scheme for honors students drastically – they proposed that the “honors portions” can be excluded from the computation of the “test-to-function ratio” (see Grading). If that was ever on the table for the three months that the project was released, then our design decisions would be completely different. As it stands, it would require an extensive amount of refactoring for this change to be practical in our project source. It is, again, blatantly unprofessional for the teaching team to expect us to be able to change our code structure at will, with such short notice, in order to correct the bias in their grading scheme. <br /><br />What made the project&#039;s issues worse was that Kenneth was not actively involved in most steps of it - when we booked an appointment with him, he was surprised by some of the changes that the TA team had made, and agreed with us that some of the restrictions were unreasonable. The teaching team also had poor intra-team communication - different parts of the project were worked on by different people, but there was little communication between them. This means that the people nominally in charge of the project (IA Eden and Kenneth) were unable to answer specific questions about subcomponents of the project, despite supervising the design of the entire product. This (ironically) could have been avoided by some integration testing for the project team to coordinate everyone’s work, but was somehow overlooked by a team of people who were teaching us project management and software engineering.<br /><br />Ethically, some of the decisions made by the TA team were also very questionable. They have failed to attribute the authors of the original code for the sample snake game and maze generator project. Although the snake game project was MIT licensed, the maze generator was not, and is by default All Rights Reserved. The fact that the teaching team did not fork the repos, instead choosing to upload them directly without a link to the original repos showed that they had no intention to attribute the original authors. This sets a terrible precedent for students - doing similar things in a non-educational setting can easily lead to IP infringements, not to mention the ethical issues of using someone else&#039;s code without permission. <br /><br />The teaching team&#039;s lack of recent Java knowledge also led to multiple questionable decisions regarding language use and (specifically) unit testing.<br /><br />The teaching team has, on multiple occasions, failed to teach Java effectively – they did not follow proper Java naming convention in the labs, nor did they offer tutorials for what is necessary to complete the project. The teaching team consistently starts their classes with a lowercase letter (class main), and some method arguments are uppercase (int power(int Base, int Exponent)). Instead of focusing on fixing common Java bugs like failing to handle null, or teaching us how to trace data flow, the lab on debugging renamed all the variables to junk values like iii, ii to show “bad coding style”, and asked us to debug code which did not follow any style guide instead. The only lab on GUI programming used JavaFX, but the “skeleton code” (detailed below) uses Swing (another GUI framework). This means that most students are woefully underprepared for the course project – they had to learn much of the skillset necessary on their own, while the teaching team taught poor practices which hindered the learning progress of students.<br /><br />The given Snake Game project (supposedly used for skeleton code for the project) was horribly outdated and poorly maintained - it was last updated 8 years ago, and the Java language has evolved a lot since then. The project had multiple issues including using magic constants, abuse of static state, and poor encapsulation. Using this project as a template will teach students who do not know about Java multiple poor practices. We were also (before negotiation) required to use JUnit 4, when JUnit 5 (with many more features and lambda support) was released 6 years ago. The given lab files (for teaching unit testing) also (somehow) had 3 versions of JUnit bundled. The suggested library for testing UI code (FEST) was last updated 10 years ago, had a defunct website which points to nothing, and does not cater to JavaFX users. Every single one of these issues could have been prevented if the teaching team had practiced proper dependency management, which is, again, something that you would expect the people who are running a software engineering course to be aware of. <br /><br />The unit testing requirements again highlighted their misunderstanding of the Java language - when provided with an example of an exploit of the unit testing grading scheme, the TA in charge John Li ignored it and created something which is unsafe Java as an example of why this is not a problem. He then proceeded to argue that the code is equivalent when his code crashes if the wrong kind of object is passed in. When we showed that they are indeed not, they responded by telling us the grading scheme is &quot;to let you explore different syntax sugar in writing Java programs&quot;.<br /><br />A quote from him highlights this line of thinking quite well (slightly paraphrased): &quot;If you managed to cram everything into one line, you are a good Java programmer which should get more marks!&quot; He actively encouraged us to write code which can fit in one line by abusing ternary operators, lambda expressions, and other language features which should not be used in this manner in order to minimize the lines of code written. This implicitly encourages us to write unreadable code in order to achieve higher marks.<br /><br />They have also instructed us to avoid encapsulation and use public fields and functions only in order to make testing easier. While this is excusable for a small programming assignment in a general programming course, this is a software engineering course. It is obvious that we should not violate OO design principles when actually doing a project in an OO language. The cognitive dissonance of learning some useful principles in the lecture (defensive programming, encapsulation) but being asked to violate them repeatedly in the course project is jarring – as if what I’ve learnt is completely irrelevant in practice. <br /><br />The general language competency level of the teaching team is low, especially when you consider their English proficiency. On asking specific questions about the project&#039;s changes, we were met with the following response: &quot;Think: Makes sense? Have fun? Design is professional?&quot; We were then instructed to modify the project instructions as we seem fit. This is counterintuitive and very vague. In the future, if we modify our client&#039;s requirements without asking them, we are obviously asking for trouble. This means that the course cannot prepare us for the industry, which is what a properly designed software engineering course should do. <br /><br />Their English proficiency sometimes hinders our understanding of what they mean, something which is readily visible in the labs and the project description. The condition in which these documents were released would be much improved if the teaching team had used basic grammar tools.",
      "comment_grading": "A D for the grading scheme, E for the midterm quiz and final, and F for transparency and honesty.<br /><br />Grading Scheme: <br />Pre-Lecture Quizzes (5%) <br />In-class Practice Exercises Assignments (5%) <br />Labs (10%) <br />Project (20%) <br />Midterm Quiz (20%) <br />Final (40%) <br /><br />Ask yourself this question: What kind of software engineering course only has 20% allocated to the project? For a topic as practical as software engineering, it is completely unreasonable for the mark allocation of the practical component to be 20% only. <br /><br />20% of the grade is basically free (if you went to the lecture and copied the solutions to the in-class assignments), and the differentiation in the midterm quiz is extremely low (the difference between the median and the LQ score is only ~4 marks, for a midterm quiz with 75 as the full mark). This shows that the mark distribution of the course would be so tight that a few careless mistakes can instantly crash your grade.<br /><br />The final exam was even worse than the midterm exam – while the midterm is boring, the final exam was a LANG exam in disguise. The problem statement for both long questions was unnecessarily long and filled with awkwardly written sentences. Much of the given text (spanning 5 pages in total) was completely irrelevant to the question. This meant that both long questions were effectively reading comprehension questions which did not assess our ability to engineer software effectively. Rather, it effectively assessed our reading speed and ability to copy pointless information from a piece of text – exactly like reading comprehension tests. <br /><br />The teaching team tried to increase the differentiation of scores by adding numerous asinine grading components to the project - but none of them were anywhere near meaningful work which contributed to our understanding of software engineering, unit testing, or anything of that sort. Most of the grading items were vague and not quantifiable: what is a &quot;trivial commit&quot;? What is &quot;unprofessional writing&quot;? What is &quot;unprofessional or non-user-friendly design&quot;? We were given no descriptors as to what precisely defines these terms, which makes the overall project grading opaque and unclear. Some of the work is also meaningless – we were required to screenshot the coverage of all our tests, and the tests themselves. For honors students who were required to implement more features than others, this caused us multiple days of work – our 155 tests amounted to 300+ screenshots. Compiling the final report in LaTeX took us more than 2 minutes, and produced a ~130-page monstrosity. As I’ve asked the TA in charge privately, they don’t check all our screenshots – if our project is done acceptably, they will take our numbers for granted. This means that they have wasted multiple days of work from my team for no tangible benefit aside from stroking their desire for formality, as the work done does nothing for our final project grade. I find the blatant disregard of the value of our time utterly reprehensible. <br /><br />Specifically, the unit test requirements are downright ridiculous. We were required to test our own private functions (or make all of our data members public (which is obviously a terrible idea)) and private constructors for utility classes. None of these make sense as a target to test, but for the purposes of the project we were forced to do so. The teaching team also encouraged us to remove error handling code for edge cases in order to achieve a better &quot;test-to-function ratio&quot;. <br /><br />The &quot;test-to-function ratio&quot; was invented by the teaching team as a metric to break the ties in unit test coverage. Strangely, it ranked our performance by the least amount of tests written, and limited us to only four calls to the target function per test. A comprehensive unit test suite should be able to cover all the corner cases, instead of only some of them - but this is not what the grading scheme encourages us to do. It encourages us to skimp on testing by cramming all the conditionals into one line, and only testing one of them. It also encourages students to not reuse their code, since extracting common behavior into methods results in a worse test to function ratio. The issue with this is that we are ranked with other students, which in turn encourages us to abuse unit testing by not comprehensively testing our code. <br /><br />At the project appealing session, we discovered that -<br />1. The project guidelines are intentionally vague in order to increase the differentiation between students;<br />2. Achieving the requirements of the project alone does not give you the full mark; and<br />3. The marks given for each subjective component will not be disclosed (such as why some marks are lost) despite multiple requests.<br /><br />This means that the teaching team was deliberately dishonest with us - they misled us with a confusing and vague project specification, graded our project with multiple subjective factors which were deliberately not made clear, and, most egregiously, refused to be transparent when we requested justification for our grading. With a marking scheme which is not public (I observed a 2-page internal document at the checking session, and the TAs claimed that there was a &quot;complex process&quot; which they refused to disclose in fear of student appeals) and filled with subjective factors, not even knowing why or how some marks are lost is equivalent to so-called &quot;black box grading&quot;, with which the teaching team can assign scores and grades arbitrarily.<br /><br />The very fact that the grading scheme is designed to reward students for writing unreadable (see Teaching), unmaintainable, and unsafe code shows you how much this course can teach you about software engineering.<br /><br />Update: Slightly below UQ (87.24%) yielded an A. Still, the rubbish grading scheme means that whatever grade I&#039;m given doesn&#039;t really matter - it&#039;s mainly a matter of luck and/or memorizing useless information anyways. Also, there&#039;s still an issue of &quot;1 percent 1 subgrade&quot; - my friend with ~-1% from my score got an A-, which means that the grading is probably a disaster given how close the scores are (~8% from LQ to UQ).<br /><br />Stay away.",
      "comment_workload": "The workload is objectively a C, and (personally) an E.<br /><br />The workload for the pre-class quizzes and the in-class exercises are not high, provided that you copied down the answers Kenneth has provided in the lecture. For the pre-class quizzes, you have two attempts to finish it. Therefore, you can randomly guess answers on your first attempt, and get full scores for your second attempt. The workload here is not large, but can get annoying, much like the rest of this course.<br /><br />The midterm quiz has a higher workload simply because you must memorize a lot of answers which seem to be common sense but instead violate common sense. You can get a taste of revising for it by the answer I provided above: “the UML diagram allows us to think about the world in a certain way”. The annoyance of revising for it is the main workload, as the quiz is short and relatively easy.<br /><br />The project (and the related issues it caused) were the main reasons why I rated the workload an E personally. Due to the lack of clarity of requirements, we were forced to ask the teaching team for clarifications repeatedly, but that only resulted in more vague and incomprehensible answers (see Teaching). Dealing with their changes as they come constituted a major part of the workload. The project itself requires you to self-learn a lot of frameworks if you do not have the experience, which could be rather intensive if you started late.<br /><br />What ultimately made me gave the workload an E was my protracted discussion with the teaching team in order to get a reasonable grading scheme for unit testing. It took me multiple hours to convince the teaching team that their scheme is flawed, and two more hours of meetings in order to reach a compromise. In the meetings, we were asked to provide a reasonable grading scheme. Putting aside the impressive ability for the teaching team to pass their workload to us when they encounter an issue (I believe designing a proper grading scheme is their responsibility), the extra workload this has given me during midterms period is enough for me to personally give Workload an E.",
      "rating_content": 1,
      "rating_teaching": 1,
      "rating_grading": 1,
      "rating_workload": 1,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": true,
      "has_assignment": true,
      "has_essay": true,
      "has_project": true,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 26,
      "vote_count": 26,
      "comment_count": 2,
      "attachments": []
    },
    {
      "hash": "XkUM94Z0GRyTLj9LPHVh6BvgnaZQ5D5Y",
      "semester": "2021-22 Fall",
      "instructors": [
        {
          "id": 124,
          "name": "LEUNG, Wai Ting",
          "rating": 1
        }
      ],
      "author": "RickyLeung",
      "date": "Dec 17, 2021",
      "title": "",
      "comment_content": "Some of the teaching material is quite common sense, such as how to manage the project, how to plan the project. But most of the material is useful for programmers, such as teaching different design patterns (Observer pattern, Factory pattern) and teaching object-oriented graph drawing (UML model). By comparing with other COMP courses, this course does not teach much specific knowledge but you can still learn some software engineering skills.",
      "comment_teaching": "LEUNG, Wai Ting is a nice professor. Students can contact him via telegram to ask questions related to the courses. Besides, TA is also nice that if you have any questions related to the lab, you can contact him for help.",
      "comment_grading": "Kenneth promised that &gt;90 = A in telegram while the class overall average is 88. The grading is really nice.<br /><br />10% in-class exercises<br />10% quizzes<br />10% lab<br />30% project<br />40% exam<br /><br />Almost all of the students can get a full mark in In-class exercises, quizzes, and lab. Don&#039;t be too lazy, then you can easily get a full mark here.<br /><br />The project is a bit difficult but the grading is still nice, there are a few groups can have a full mark in the project.<br /><br />Impossible to get a full mark in the exam, but the class average is quite high (around 75). If you can get a full mark in other components, getting an average score in an exam is not terrible.",
      "comment_workload": "Assignment:<br />In-class exercises, quizzes, and labs are really easy to do.<br />The group project takes around a whole week to do. By comparing to other COMP courses such as COMP2011 and COMP2012, the workload is like a doubled-PA. However, COMP3111H has one group project only and the deadline has been postponed for 3 to 4 days. Thus, the workload of the project is not heavy.<br /><br />Class:<br />Instead of the regular class, each student has to watch two extra videos a week for two weekly quizzes. These videos may take you an hour a week, but still an acceptable workload.",
      "rating_content": 4,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": false,
      "has_final": true,
      "has_quiz": true,
      "has_assignment": false,
      "has_essay": false,
      "has_project": true,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 3,
      "vote_count": 4,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "8j5QHbdWWTF7j23YFY2QuodWPD0jtYuz",
      "semester": "2020-21 Fall",
      "instructors": [
        {
          "id": 124,
          "name": "LEUNG, Wai Ting",
          "rating": 1
        }
      ],
      "author": "TomNotch",
      "date": "Jan 14, 2021",
      "title": "Delay this course, careful if you decided to take it",
      "comment_content": "Basical software engineering concepts, only qualitative analyses, no quantitative analyses. So you can say that it&#039;s like a business management course, no coding of any language is taught, surprising, isn&#039;t it ? But the result is that you can only learn a little about software engineering, even if we only talk about the management part.<br /><br />Ever since online teaching, the faculty has adopted flip mode, which means the main course material is delivered through pre-recorded videos, and they require you to watch 2 videos before weekly lecture, and finish 2 quizzes, each consisting of 5 single multiple choice questions, which they say are easy, but according to most students&#039; feedback, at least on of the questions in each quize are quite vague and hard to do right. They put some in-class exercises during the lecture (usually 2), and require you to submit them after lecture for attendance.<br /><br />All in all, I dislike flip mode, because sometimes when you have questions regarding the real course materials in the pre-recorded videos, you cannot ask the professor directly. Writing e-mail every time can be annoying, and it&#039;s easy to forget about the questions when you attend the lecture to do some &quot;practical&quot; exercises.",
      "comment_teaching": "3111 and 3111H track students are taught together, the only difference is that H track students have a slightly more challenging project and &quot;better grading&quot; (said by the professor) than non-H track students.<br /><br />Since it&#039;s flip mode that they delivered the course, the teaching is only about in-class exercises.<br /><br />You&#039;ll feel that the conventions of drawing a class diagram is unclear and it&#039;s often the case that whether you are right or not is totally up to the professor and TAs.<br /><br />Other in-class exercises are fine though.",
      "comment_grading": "This part is what I&#039;m so disappointed about.<br /><br />Grading scheme : (directly copy and paste from canvas)<br />Evaluation: Pre-Lecture Quizzes (10%), In-class Practice Exercises Assignments (10%), Labs (10%), Project (30%), Final (40%)<br /><br />Professor adopted a mixture of both relative and absolute grading as a result of the whole class has done a good job.<br /><br />Well, here&#039;s some fun facts :<br /><br />Overall 89.93% == A<br />Overall 85.26% == B<br />Overall 81.69% == C+<br /><br />It doesn&#039;t matter which one is mine, what matters is that this shows that most students&#039; overall lies in 80%~90%, and the professor has to decide who gets A+ and who gets D-, thus you have D- to A+ in just 10%.<br /><br />Grading of the final exam is totally dependent on professor and TAs, because there&#039;s even no standard or preferred&nbsp;&nbsp;solutions provided after exam. How can you appeal ? You can only wish and you are doomed, that&#039;s it.<br /><br />Professor Kennethe said &quot;I&#039;m generous&quot;, but actually not.",
      "comment_workload": "Workload is not high, as long as you know how to use github and code Java.<br /><br />The main problem is about project.<br /><br />This semester the project is a Gradle based data analysis application. If it&#039;s the same when you are taking this course, then good luck with Gradle + Eclipse, because many students and I all encounter misterious problems when setting up the environment and coding, that even the TAs cannot solve. Then who do you expect me to approach, father of Java, Eclipse developer or Gradle developer ?<br /><br />Another serious problem is that the teaching team acts as the client/stakehoder and all student teams act as &quot;Party B&quot;, who&#039;s gonna be responsible for everything that goes wrong. We are just beginners learning how to be a good software engineer, OK ? Not some employees that are disposable and can be used as tools.<br /><br />One little problem in the project (which is due to the vague requirement that they put on canvas), and they deduct 20 points from 100. I run out of words to express my disappointment towards this course.<br /><br />TLDR, the workload is not high, but whether it&#039;ll be turned into a good result, you never know.",
      "rating_content": 3,
      "rating_teaching": 4,
      "rating_grading": 1,
      "rating_workload": 4,
      "has_midterm": false,
      "has_final": true,
      "has_quiz": true,
      "has_assignment": true,
      "has_essay": false,
      "has_project": true,
      "has_attendance": true,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 8,
      "vote_count": 8,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "Q1mrw97kNQfE76IlnzvnQU4p8q0kyy1X",
      "semester": "2020-21 Fall",
      "instructors": [
        {
          "id": 124,
          "name": "LEUNG, Wai Ting",
          "rating": 1
        }
      ],
      "author": "Think",
      "date": "Dec 23, 2020",
      "title": "Same as 3111",
      "comment_content": "Same as 3111. SW engineering concepts and some modeling.<br /><br />Although theoretical background is important, the course puts too little focus on git usage. It was such a pain in the neck to collaborate for the project with other students who have no idea of typical git workflow...",
      "comment_teaching": "One pre recorded video per week, and one zoom lecture for recap and exercises. It is not a bad approach, but the pre recorded videos are just reading the ppt slides, so they are not worth too much.<br /><br />Also, the labs are nearly useless imo. They are too much focused on eclipse usage, and the instructions have some mistakes too. They teach git usage only with eclipse integration...",
      "comment_grading": "Grades are not out yet, but one thing: it is too easy to get good marks except for the final, making the mean very high: so final exam will basically decide your grade. I think final exam is more or less a matter of luck, given that you are to draw diagrams that is correct according to the professor.",
      "comment_workload": "Workload is just Ok. The difference with non-H course is that you should include some more wow factor into your project, so you need to spend more time on it. Still, given that it&#039;s a 4 credit course, not too much workload.",
      "rating_content": 3,
      "rating_teaching": 4,
      "rating_grading": 4,
      "rating_workload": 4,
      "has_midterm": false,
      "has_final": true,
      "has_quiz": true,
      "has_assignment": true,
      "has_essay": false,
      "has_project": true,
      "has_attendance": true,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 0,
      "vote_count": 0,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "24CJAUDsac6gGCSz8xW41Dw267EFGqqh",
      "semester": "2017-18 Fall",
      "instructors": [
        {
          "id": 96,
          "name": "KIM, Sung Hun",
          "rating": 1
        }
      ],
      "author": "cdbn",
      "date": "Dec 30, 2017",
      "title": "",
      "comment_content": "这门课的主要内容:<br />midterm 1前:<br />- Java, Java spring, github<br />- Software development process<br />- Requirements<br />- OO Modelling with UML<br />- Design patterns<br /><br />midterm 1后:<br />- Design patterns<br />- Refactoring<br />- Defensive programming<br />- Testing<br /><br />这门课的lecture note水准低，教授没把它们统一好，导致很多不同notation的出现。很多知识点也都是浅浅带过，只说definition罢了，导致学生不知道应该细读还是直接ignore。<br /><br />如果选择不上H堂，建议大家在大二spring上这门课，因为大二暑假实习的时候可能会用到很多这门课的知识点。",
      "comment_teaching": "教授教书很热情，尝试与学生互动，但是学生们都不给予反应。",
      "comment_grading": "midterm1: mean 70/100，highest: 97<br />midterm2: mean 75.1/100，highest 100<br />project: mean 118.9/130<br />本人: midterm1 80，midterm2 95.5，project 126 —&gt; A+<br /><br />这门课的grade很好，因为H堂采用absolute grading，所以建议大家上H堂。<br /><br />**个人感觉midterm的题目都莫名其妙的，尤其是midterm1问了一些匪夷所思的题目让学生们不知该如何回答，小心为上。",
      "comment_workload": "这学期的project是要做line的chatbot，workload和代码量还是很大的，不过会分成几个milestones来guide学生们完成project。<br /><br />project有三个topics，H堂和non-H的差别是H堂会指定做一些难度更高的features。认真做这门课的project的话还是可以学到很多practical的知识，比如说如何collaborate on Github，设计UML diagram和选择哪个design pattern，都是现实生活中很重要的skills。<br /><br />**建议大家提早开始做milestone，不要临时抱佛脚。",
      "rating_content": 4,
      "rating_teaching": 4,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": false,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": true,
      "has_attendance": false,
      "has_reading": true,
      "has_presentation": true,
      "upvote_count": 4,
      "vote_count": 11,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "XESQCRa62eRDhJCLkn2UYFdsXkjHxS1O",
      "semester": "2016-17 Fall",
      "instructors": [
        {
          "id": 96,
          "name": "KIM, Sung Hun",
          "rating": 1
        }
      ],
      "author": "Lynn",
      "date": "Jan 20, 2017",
      "title": "",
      "comment_content": "Contents are sufficient but remain at introductory level. Lectures are mostly talking about some must-known concepts of software engineering. You could get a general understanding about dev pattern, testing, architecture, etc. The group project is a web application. However, there is almost no difference between 3111 and 3111H, which made me a bit disappointed.",
      "comment_teaching": "Professor is active in teaching and sharing his own experience, but sometimes lab materials are not well-prepared.",
      "comment_grading": "It is quite easy to get a good grade as long as you&#039;ve been truly devoted to the group project. Exams are mostly about the concepts introduced in lectures.",
      "comment_workload": "Although I have spent much time and effort on the group project, I still felt that the project is not as challenging as expected (partially because of the ambiguous requirement).",
      "rating_content": 3,
      "rating_teaching": 4,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": true,
      "has_assignment": false,
      "has_essay": false,
      "has_project": true,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 1,
      "vote_count": 2,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "vAYReNpuXAplYtfRgGltGSuj3bchXG8g",
      "semester": "2016-17 Fall",
      "instructors": [
        {
          "id": 96,
          "name": "KIM, Sung Hun",
          "rating": 1
        }
      ],
      "author": "jshin49",
      "date": "Jan 11, 2017",
      "title": "Good Grades, not much workload",
      "comment_content": "The content is essentially about Design Patterns, Development Processes, and many other common Software Engineering Practices.",
      "comment_teaching": "The professor&#039;s teaching style is okay.<br /><br />He tries to interact with the students, but they do not respond much.<br /><br />His English is not bad to understand either.",
      "comment_grading": "Grading scheme is pretty lenient if you do what you are supposed to do.<br /><br />Just do everything and you are pretty much guaranteed an A range unless you mess up your exams. <br /><br />Doing above mean in the exams is good enough.",
      "comment_workload": "No coding required for the lectures, but a lot for the Project and labs.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 5,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": true,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 1,
      "vote_count": 3,
      "comment_count": 0,
      "attachments": []
    }
  ]
}