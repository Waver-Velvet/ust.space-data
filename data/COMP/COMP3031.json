{
  "course": {
    "id": 218,
    "subject": "COMP",
    "code": "3031",
    "name": "Principles of Programming Languages",
    "description": "Comparative studies of programming languages, programming language concepts and constructs. Non-imperative programming paradigms: object-oriented, functional, logic, concurrent programming. Basic concepts of program translation and interpretation. Storage allocation and run-time organization.",
    "categories": [],
    "website": "https://course.cse.ust.hk/comp3031/",
    "credits": 3,
    "semesters": [
      2310,
      2210,
      2110,
      2010,
      1910,
      1710,
      1610,
      1510,
      1410
    ],
    "prerequisites": "<a class=\"course-link\" data-subject=\"COMP\" data-code=\"2012\" href=\"/review/COMP2012\" target=\"_blank\">COMP 2012</a> OR <a class=\"course-link\" data-subject=\"COMP\" data-code=\"2012H\" href=\"/review/COMP2012H\" target=\"_blank\">COMP 2012H</a>",
    "corequisites": "",
    "exclusions": "",
    "rating_content": 4.35,
    "rating_teaching": 4.24,
    "rating_grading": 4,
    "rating_workload": 3.59,
    "review_count": 17,
    "single_review": false,
    "enrollment_status": 3,
    "is_favourited": false,
    "is_subscribed": false,
    "user_review_hash": "",
    "contributor_has_more": false,
    "instructors": [
      {
        "id": 109,
        "name": "LUO, Qiong",
        "count": 10
      },
      {
        "id": 1526,
        "name": "PARREAUX, Lionel",
        "count": 7
      }
    ]
  },
  "reviews": [
    {
      "hash": "WivYJIMzULf9YjPPk9w5VRzEyjy97e1b",
      "semester": "2023-24 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "AlexJ",
      "date": "Feb 19, 2024",
      "title": "Great Intro to PL Class",
      "comment_content": "A comprehensive overview of PL topics, with particular focus on FP. Would have liked some more overview of non-FP paradigms, possibly spending more time on Lisp itself too rather than Scala, but it still helped a lot.",
      "comment_teaching": "Concise lectures that grasped the most important points of each topic. Great to ask questions and get clarification on important concepts, but you need to keep up with each lecture to understand the last.",
      "comment_grading": "Fair on exam and homework grades",
      "comment_workload": "HW load was relatively light, and if you understand the lab sessions the exams are very doable.",
      "rating_content": 4,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 0,
      "vote_count": 0,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "Ruu9bAfdLXK5Qws8P1B18X7tH8k6XgKt",
      "semester": "2023-24 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "L.T.",
      "date": "Dec 15, 2023",
      "title": "Gd Intro to the World of FP",
      "comment_content": "Details refer to 151044, hot key ‚û°Ô∏è<br />Scala 3: A popular FP language<br />(mid-term)<br />Reactive Programming<br />Lisp<br />Logic Programming<br />Concurrent Programming<br /><br />üåü it basically introduce the properties of FP (immutability, pure function, currying etc) and then make interpreterssss using these props",
      "comment_teaching": "‚úÖ Professor and TAs are highly reachable to any type of questions &amp; discussions (bc of the discord grp i supposed)<br />‚úÖ Lab and exercise sections are highly interactive + useful, very rare in hkust <br />‚ùå most of the time the professor is just READING PPT with little more explanation on some difficult concept -&gt; u do need time to do some pre + after class work to understand it unless u r genius",
      "comment_grading": "Details refer to other post, hot key ‚û°Ô∏è<br />üò¢ heavy weighting on really hard assignments (do it as early as u can)<br />ü™´ mid-term and finals are much easier than course materials &amp; assignments",
      "comment_workload": "üò™ if u r new to FP, all these abstract concepts and ideas take a lot of ur time to understand it. Especially, they r so many syntax sugar in Scala (syntax diabetes) <br /><br />üåü it is a really hard and deep topic, if u want to learn more and get really good grade u probably need to spend tons amount of time else it is not THAT scary.",
      "rating_content": 5,
      "rating_teaching": 4,
      "rating_grading": 4,
      "rating_workload": 3,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 4,
      "vote_count": 5,
      "comment_count": 2,
      "attachments": []
    },
    {
      "hash": "VFWcQbHI8YsrI1Ipr3d62VHBTkKcm9he",
      "semester": "2023-24 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "Re",
      "date": "Dec 14, 2023",
      "title": "3031",
      "comment_content": "Well this course is a hard course which serves as an introduction course of functional programming, along with an introduction of Scala programming, introduction to some abstract algebra, introduction to a functional solution to some common problems in computer science such as reactive programming, design patterns and etc., as well as interpretation on Lisp.<br /><br />This is a hard course as a whole. If you want to know more, consider reading other reviews written for this semester or last Fall semester.",
      "comment_teaching": "Not really good. Apart from the fact that the TAs and professor are willing to answers questions. The professor seems does not know how to pace his teaching. Given the content of this course is hard, he tend to finish the lectures in 80 minutes in a 110 minutes lesson by reading his slides.<br /><br />The PA, Labs and exercises are not quite able to cover most of the stuff in course. The preparation materials of the exam are far from enough for you to be well prepared",
      "comment_grading": "10%*3 Programming Assignments<br />30% Midterm<br />40% Final",
      "comment_workload": "This is a hard course which it should take immense amount of time to at least understand what is going on in each slides.",
      "rating_content": 4,
      "rating_teaching": 3,
      "rating_grading": 3,
      "rating_workload": 1,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": false,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 3,
      "vote_count": 4,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "ttIy0GeaJgSkvxalv5LRMVqURPQBMA6o",
      "semester": "2023-24 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "151044",
      "date": "Dec 13, 2023",
      "title": "Functional Programming and Data Structures using Scala",
      "comment_content": "As the title suggests, this is a course on the general principles of programming languages (but we somehow ended up doing everything in Scala anyways....?)<br /><br />The first half of the course is a in-depth dive into different parts of the Scala 3 language, with a focus on the functional aspect of it.<br />Topics of this part include:<br />Evaluation strategies (Call-by-name and Call-by-value)<br />Higher order functions (Functions returning functions and currying)<br />Immutability and Object-Oriented Programming in Scala (Abstract classes, immutable data structures such as Cons-Lists, and companion objects)<br />Common Functional Constructs (Map, Filter, Reduce, Folds, and Pattern Matches on case classes)<br />Subtyping and Variance (What is the type of a function or a method? When is a function a subtype of the other?)<br />Proofs on Immutable Data Structures (Lists and Trees, Structural Induction)<br />Maps (the Dict kind in Python) and For-Expressions (For-loops, but functionally)<br />Monads, Monoids, and Higher-Kinded Types<br />Lazy evaluation (Lazy lists and infinite sequences)<br />Context management in Scala (the using and given constructs)<br />State and Referential Transparency<br /><br />The second half of the course is a whirlwind tour of other programming paradigms, but still grounded in Scala because that is the language we use to implement most of these paradigms (and definitely *not* because LP likes Scala):<br />Reactive Programming (Observers and Functional Reactive Programming)<br />Lisp and Scheme (Both writing programs in Lisp and implementing a subset of Scheme using Scala are included)<br />Prolog (Logic programming, matching and unification)<br />Parallel Programming (Futures and their composition, Async callbacks)<br />Actor Systems<br /><br />The midterm focused on pattern matching and higher-order functions (which are going to be your bread-and-butter), subtyping, and structural induction.<br /><br />The finals focused on pure functional programming (moving a imperative program to functional), Lisp (Writing and translating programs in Lisp with Lisp), the using construct, and functional representations of booleans (Church booleans).<br /><br />The assignments and labs had a heavy focus on immutable data structures (to the point it was an inside joke of mine to refer to this course as Data Structures in Scala).<br /><br />Overall, the course is *extremely* content rich, and certainly a must-take if you&#039;re interested in functional programming and/or interested in learning more about the listed topics.<br /><br />Also fair warning: This course is quite hard.<br /><br />(Don&#039;t take this course if you hate Scala).",
      "comment_teaching": "Prof Parreaux (LP) taught quite well. He elaborated on the concepts presented quite nicely. The teaching materials were well-prepared, and had a few exercises for you to work out if you want extra practice. He was willing to answer questions or slow down his pace when we&#039;re confused about something (for example the topic on variance and subtyping). He (and his teaching team) was readily available to answer questions on the course Discord server, whether it be course concepts, assignment questions, or general chit-chat.<br /><br />The labs were well-delivered and interactive (which is quite a rarity in HKUST). They were divided into exercise sessions (where a few of us formed groups and worked out pen-and-paper exercises related to the course material on the lab whiteboard), and the labs (which were less interactive (but no less interesting) and focused on individual completion of Scala coding tasks). <br /><br />One nitpick about the lecture delivery is that the pace is quite fast - you&#039;ll end up confused even if you&#039;re trying to follow along. Spend some time clearing up the concepts and you&#039;ll be fine.",
      "comment_grading": "Grading scheme is normal, per COMP course standards:<br />30% Assignments (10% each)<br />30% Midterm<br />40% Finals<br /><br />Lab attendance is mandatory and will be taken, though not counted towards the final letter grade. No idea what happens if you miss one - though try not to since they are quite fun.<br /><br />Assignments are surprisingly tricky and require a lot more thinking before writing any code - the assignments are like COMP 3711&#039;s in this regard. Assignment 1 was relatively easier (a n-ary tree), Assignment 2 was painful (a Rope data structure which had tons of special cases), and Assignment 3 (extending the Scheme interpreter to support objects, pattern matching, and call-by-need) required quite a bit of time in order to work out where even to begin. Plan your time accordingly.<br /><br />Assignment Statistics:<br />Low/LQ/Mean/Median/UQ/High/Max:<br />1: 0/7.25/8.01/9/10/10/10<br />2: 2.8/7.25/7.91/7.8\t9/10/10<br />3:0/0.7/5.53/6.2/9.2/10/10 (Note the huge difference between LQ and UQ)<br /><br />Midterms and finals were acceptably difficult, and were a very nice learning experience for me - each exam managed to teach me something new (Using the type system in Scala to prove subtyping? Church booleans? Fun!... but quite scary in the exam, especially the subtyping question). The scores are distributed quite nicely, but beware that 1 mark in the exam = 0.75 or 1% of the course grade.<br /><br />Exam statistics:<br />Low/LQ/Mean/Median/UQ/High/Max:<br />Midterm: 13.5/22.25/26.6/25.5/32/39.5/40<br />Finals: 9/21.5/26.45/28/31.25/39.5/40<br /><br />(Note: it was impressive how quickly the finals were graded - it only took the TAs 6 hours from when the finals finished to release marks.)<br /><br />~4 marks below the (estimated) UQ yielded an A-.",
      "comment_workload": "If you only aim to do well in the course, then the workload is moderate - do the assignments a bit earlier, do the practice paper(s) that LP provides, and you should be good to go. Although the provided midterm prep questions were... not on the same difficulty level as the actual midterm, they did prepare us for the coverage of the midterm quite well. (Perhaps it&#039;s good to note that LP&#039;s exams can be.... interesting when he puts his mind to it).<br /><br />Trying to grasp *all* the knowledge in the course, however, will drop the workload somewhere around a C or a D. Quite a bit of the course materials are not examined, and you can get a nice grasp on what would according to the sample papers. That means that there are actually lots of things that aren&#039;t examined, and some of them are still a mystery to me after the semester (the part of higher-kinded types, actor systems, and functional reactive programming is still confusing for me after the semester).<br /><br />Unlike what I&#039;ve read in the other course he teaches (COMP 4901U), the labs here aren&#039;t work-intensive. You show up, finish whatever is being asked of you, then you&#039;re good to go. Remember to sign the attendance sheet though.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 3,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": true,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 8,
      "vote_count": 8,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "nXIx0b9FhsAMR40wDr1aWEoyUMZcjdtj",
      "semester": "2022-23 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "JKay",
      "date": "Sep 06, 2023",
      "title": "Best Course in HKUST",
      "comment_content": "Comparative studies of programming languages, programming language concepts and constructs. Non-imperative programming paradigms: object-oriented, functional, logic, concurrent programming. Basic concepts of program translation and interpretation. Storage allocation and run-time organization.",
      "comment_teaching": "Acceptable.<br /><br />Basically reading from slides, but slides are sufficient enough.<br />Occasionally ends classes 30 minutes early which is good for WLB is UST.",
      "comment_grading": "Good. Large A range and is not difficult to receive if you like functional programming.<br /><br />It&#039;s especially easy given that midterm and final exam were open book.",
      "comment_workload": "Light. Similar to COMP1012 which introduces new programming language and concepts.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 5,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 3,
      "vote_count": 3,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "ItHozh98yz3tWQCCBYaRtOfPtZjNfHLK",
      "semester": "2022-23 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "Darwin1117",
      "date": "Feb 26, 2023",
      "title": "&quot;The Ultimate Guide to Experiencing What Scala Has to Offer&quot; - ChatGPT",
      "comment_content": "The whole course is changed, other reviews prior to this semester would be outdated.<br /><br />&quot;A tour of important programming language paradigms and constructs, with an emphasis on functional programming and Scala.&quot;<br /><br />Basically the fundamentals of functional programming languages. Mainly focus on Scala 3 and some Lisp after midterm.<br /><br />P.S. There is a very big overlap with EPFL&#039;s CS-210, make sure to check that out.",
      "comment_teaching": "He is basically a Scala enthusiast.<br />He believes only Scala can save us and nothing else.<br />He and his courses are Scala-ism.<br />If you also loves Scala or FP then you are speaking the same language as him, and the lectures would be fun.<br />(Otherwise you have no clue what he is talking)<br /><br />He likes to create Discord server, I think it is a pretty good way for us to communicate. It feels more friendly than those Piazzx thing.",
      "comment_grading": "Programming Assignments: 10% each x3<br />Midterm: 30%<br />Final Exam: 40%<br /><br />Grading is decent, since most of the student do not understand what they are doing.",
      "comment_workload": "Fair enough<br />Attendance on lab is required, just tick your name and go",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 1,
      "vote_count": 1,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "o3sKlAF1MvL0aMilQiCmgmRKdMLNT40G",
      "semester": "2022-23 Fall",
      "instructors": [
        {
          "id": 1526,
          "name": "PARREAUX, Lionel",
          "rating": 1
        }
      ],
      "author": "blairC",
      "date": "Jan 27, 2023",
      "title": "",
      "comment_content": "the programming language used: scala<br />Contents of this course had changed from this semester so there aren&#039;t many past study materials<br />This course is about functional programming language...<br />very hard...<br />don&#039;t take this course unless you are a genius",
      "comment_teaching": "ok... he is kind and willing to help students",
      "comment_grading": "I think the whole grading system was okay... <br />Level of difficulty of Final and Midterm: Adequate",
      "comment_workload": "can&#039;t say the workload is high compare to other comp courses, but you have to study a lot to keep up with the contents.",
      "rating_content": 2,
      "rating_teaching": 3,
      "rating_grading": 3,
      "rating_workload": 2,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 1,
      "vote_count": 1,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "1FWhUhlWNNVrghWGzBSIVJDxlVGAdFR3",
      "semester": "2021-22 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "Sahab",
      "date": "Dec 21, 2021",
      "title": "Take this course after 3711",
      "comment_content": "For the actual content, please refer to the other reviews. These are my opinion on the contents:<br /><br />Overall, the course focused too much on &quot;compilation&quot; of the languages (at least for my liking), rather than important concepts in those paradigms that we would actually apply irl. Quoting another review, if you don&#039;t want to be a human compiler, do not take this course.<br /><br />1. Functional Programming (SML)<br /><br />On the choice of the language, SML is quite an old, I would even say outdated, language. There are more prominent purely functional programming languages out there such as Haskell which have much more use then SML. <br /><br />As an intro to functional programming, the course content focused too much on syntax and how the interpreter works (type inference) rather than important FP concepts like partially applied functions and currying. Instead, the only FP concept I have learnt (which is already known by all CS student) is recursion. <br /><br />However, it still managed to cover popular FP functions such as map and filter, so I would not regard this part as completely useless.<br /><br />2. Grammars and Expressions (Flex and Bison)<br /><br />IMO easier part of the course, may be (or may not be) useful in programming projects. Check Github and you will find some projects using Flex and Bison, tho not a lot of them.<br /><br />3. Logical Programming (Prolog)<br /><br />Again, a lot of syntax and inner workings of the interpreter (prolog search tree). My main complain is that the course material failed to capture the different mindset in prolog from C++ and even Functional programming. By focusing on syntax, it is hard for an average student like me to catch up with how think in a way that helps me to code in prolog. The low average score of PA2 clearly reflected this failure. Prolog is a beautiful language, and this course did not do it justice. <br /><br />4. Procedural Programming (parameter passing and scoping)<br /><br />Purely conceptual, little to no coding. This part teaches parameter passing methods that are more niche. May use these concepts in some languages, but not a lot of them.<br /><br />5. Parallel Programming (CUDA)<br /><br />This is the part I found the most fun in learning. An intro to parallel programming in CUDA, multi-thread programming for the GPU. Because the GPU has much more threads than the CPU, it is more suited for parallel programming, and CUDA is the more popular one for such a use. The lecture mainly used matrix computation as examples, which is quite clear and illustrative.<br /><br />All in all, if I could turn back time, I would not have taken this course.",
      "comment_teaching": "Prof. Luo is very friendly, willing to answer questions. But expect a lot of PowerPoint reading from Prof and especially the TA in lecture and labs. Lab materials alone were enough for me to understand all course materials and I stopped attending class two lectures into the semester. But after all, I didn&#039;t get A-range so the secret may lie in lectures (?) That&#039;s for you to find out.",
      "comment_grading": "Should be absolute grading. Grading is quite fair.<br />Ovr: 76 =&gt; B<br /><br />A few tips for assignments:<br /><br />Read past paper for code examples if you have time. Especially for Prolog. The codes in the past papers over the years covered different ways of SML and Proglog in tackling different problems, so you may want to look into them for your inspiration in assignments. <br /><br />Another observation is this semester&#039;s assignment questions can mainly be viewed as graph questions. In particular, we are given a list of flights from between cities and need to find whether a path between two cities exists, what is the shortest path etc. Assignment 1 and 2 are basically the same, just in different programming languages. It may be worth your time to look into graph algorithms such as depth-first-search and Dijkstra before working on the assignment. Or, even better, take COMP3711 before taking this course.<br /><br />Exams:<br /><br />Just when I thought every question would follow past exam papers, this year&#039;s BNF and Parse Tree problem in the midterm exam includes recursion, not seen in other year&#039;s paper. Caught me off guard. And the Prolog search tree problem was also more difficult than before. So, although the other reviews may tell you to practice past exam papers, do prepare for the unexpected.",
      "comment_workload": "3 programming assignments, each took me half a week to complete (or give up), so you may want to spare some time for each of them. Some assignment has 10 test-cases for grading, each correspond to 1 mark of the assignment, and each mark of the assignment correspond to 1 mark of your total grade. The examples given in the assignment document is NOT enough for you to pass all test cases, as I have learned painfully.<br /><br />Stackoverflow doesn&#039;t help much either. SML and Prolog are not popular languages, so you are pretty much on your own. I did manage to find some solutions on SO but they are not sufficient in passing all test cases. <br /><br />The prolog assignment is especially difficult, so please spare a lot of time for it and read some past exam papers to get inspiration for you codes.",
      "rating_content": 4,
      "rating_teaching": 3,
      "rating_grading": 4,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 2,
      "vote_count": 2,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "ZOBS0WK30py4AHHOHtq1ngEf42qeqOVV",
      "semester": "2021-22 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 0
        }
      ],
      "author": "ruozhilaji",
      "date": "Dec 16, 2021",
      "title": "Not that great !!!",
      "comment_content": "SML, Flex &amp; Bison, Prolog, CUDA, and some other minor topics.<br />The content is a little bit old but the ideas are important.",
      "comment_teaching": "I do not think her teaching is good. She speaks quite slowly and makes me really sleepy. So I usually watch the recording at double speed. <br /><br />For office hours, I do not make use of it since it is just after the class. I belieave there are lots of students including me having other classes after this course.<br /><br />It seems the Prof does not prefer to answer questions via emails. She usually replies to my emails 2~4 days after I send them to her. Also one of the TAs is not reachable, he never replies to my emails. The other is relatively friendly but not helpful. It seems that she does not know too much about the course materials and cannot answer my questions.<br /><br />I think the Prof does not care about this year&#039;s feedback since she will go to the GZ campus in the next academic year with a high probability. So she may just treat the teaching as one of the compulsory tasks.",
      "comment_grading": "I think the grading is much worse compared with previous offerings. I was tricked by previous reviews. This year, the mean (approximately lower than 75%) seems to be B-.<br /><br />From my understanding, this is unfair this year. If the Prof wants absolute grading, she should make sure the overall means are relatively stable.",
      "comment_workload": "Assignment 3 is a little bit tricky this year. And I think all the assignments are more time-consuming this year. You&#039;d better leave one afternoon for each.",
      "rating_content": 4,
      "rating_teaching": 2,
      "rating_grading": 1,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 2,
      "vote_count": 3,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "agysFZeau3ZsFxSaIEHGTmpdl8lx1Uts",
      "semester": "2021-22 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "rind",
      "date": "Dec 15, 2021",
      "title": "A must take course for programming lovers",
      "comment_content": "This course teaches you different programming paradigm and more philosophical way of programming languages. It also check whether you are clever enough to learn other style of programming within one semester.<br /><br />1. Functional Programming (SML)<br />Programming Language with only recursion, definitely nightmares for those who loves looping. As a strong typed PL with no memory for variables, SML eliminates all side effects that may occurs in procedural programming.<br /><br />2. Grammar, Regular Expression (Flex and Bison)<br />The more philosophical way exploring the system of defining grammars, lexically analyse whether an input string belongs to the grammar (Parse tree, Regular Expression, CFG).<br />The second part consists of a practical use of defining your own grammar by:<br />Flex (Fast lexical Analyser): Analyse whether the input string matches the grammar.<br />Bison: Provide semantics for calculation.<br />(You have to write some C/C++)<br />With the above two tools, you can define your own grammar, and do whatever tricks you want to strings input (the PA of this chapter ask us to implement a program to play with the number of atoms in an organic chemical compound, which is super fun).<br /><br />3. Logical Programming (Prolog)<br />At this point you have to completely switch your mindset, I would say functional programming is somehow similar to procedural programming (you call functions, execute line by line). However, Prolog presents a different way of thinking, instead of {input -&gt; output}, Prolog put emphasis on relationship, which makes it powerful (I am still stunned by its powerful way of querying), but also extremely difficult to write.<br /><br />4. Procedure Activations<br />Comp2011/2012 may cover some of it, mainly about how to call functions (by value, by reference..., which is related to lvalue and rvalue) and how activation records are created. Introduce C procedure in a more deep way.<br /><br />5. Parallel and Concurrent Programming<br />Using Java as an example of parallel programming. As this course is teaching the &quot;principles&quot; only, so you don&#039;t have to know how to write java code. Also Comp3021(In Fall Semester) will have a more in-depth analysis on this topic.<br /><br />6. GPU Parallel Programming (CUDA)<br />Very interesting topic but it is only a very brief introduction to CUDA programming. You can feel the power of parallel programming and it is an art to allocate recourses for each thread as performance can varies a lot. You have to use C/C++ to implement it.",
      "comment_teaching": "Professor teaches quite well, and you can ask her in office hour if you have any problem with this course. Her tone is a little bit slow which makes me feel a bit sleepy in class.<br /><br />Also, the content covered in slides are just the fundamentals of that topic. It is like teaching you 1+1 in class but ask you to perform differentiation in programming assignments.<br /><br />One of the TAs, Chu Han response the emails super quick.",
      "comment_grading": "Programming Assignments x 3 (10% each) on SML, Flex and Bison, and Prolog.<br />Midterm Exam 30%<br />Final Exam 40%<br /><br />For me:<br />PA: 30/30<br />Midterm: 66/100 (mean: 60.8, high: 92, low: 28)<br />Final: 96/100 (mean: 79.4, sd:14.8, high: 100, low: 25)<br />Total: 88.2/100<br />Grade: A-<br />This course is adopting absolute grading, meaning 95 for A+, 90 for A, 85 for A-<br /><br />The professor says she will adjust because the midterm is performing lower than expected and the assignment1 is relatively harder. I don&#039;t know whether she adjust it by making the final exam easier or what lol.<br /><br />The midterm exam and final exam are quite similar to the past papers, do remember to do the past paper before the exam.<br /><br />The midterm exam will ask you to write SML code from scratch, meaning that you must practice more.<br />The final exam provide skeleton code and you just fill in the blanks (one statement/ one predicate per blank), so you do not have to start everything from scratch and remember all syntax which is quite nice.<br /><br />The TAs grade our assignments in person, meaning that there will be some mistakes in grading. If they find your code cannot be compiled, they will just give 0 marks. I receive 0 marks for once, appeal and finally get full marks.",
      "comment_workload": "No attendance for class or labs.<br />The workload mainly comes from the assignments.<br />Assignment 1 is SML on graph theory, where you have some flights from City A to City B, then you have to implement a bunch of functions to find shortest paths, number of paths, etc.<br />Professor also thinks that Assignment 1 is more difficult this semester compared to previous semesters. Therefore start doing it earlier.<br />Assignment 2 is on Flex and Bison, like a breeze.<br />Assignment 3 is a nightmare, on Prolog, and I have never feel like I didn&#039;t make any progress after spending 3 days on this. The topic is same as the Flights one, but the hard part is prolog is using DFS for asking more answers, in order to obtain all possible answers without repeating, it is a hard work. I finally figure out a structure of writing code that finishes all 5 questions, and in total I spend 5 days on this.<br />But what is more important is that the sample answer consists of a bunch of functions not taught in class, meaning that this is also somehow a difficult task to implement using what the lecture slides taught us.<br />If you really struggle with prolog then you should ask for help earlier.<br /><br />For the midterm and final, do more revision on past papers.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 4,
      "rating_workload": 3,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 2,
      "vote_count": 3,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "ZBmeLNamrxeKVCYCFQzJLyQXodJfNv1E",
      "semester": "2021-22 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "I want to sleep",
      "date": "Dec 12, 2021",
      "title": "TA will enter your code and run in computer",
      "comment_content": "You will learn lots of programming language , but those programming language is not common language you seen before. For example functional programming logic programming and CFG.<br /><br />Even if you are good at procedure programming, it doesn‚Äôt mean you can master those languages mentioned above. So make sure you have a briefly understanding on the course content before you enroll.<br /><br />The reason I give D is becuz the languages in this course is out dated. I don‚Äôt say that is useless, functional programming is used in ibank, and logic programming is good for processing NLP. But in industry they use newer version. So I think the content needs to revise in order to catch up industry level.",
      "comment_teaching": "Ok the prof is nice, she tried to explain the things clearly so I will say the teaching is not reli bad, but sometime prof will mention the content which don‚Äôt put down in the notes, so it‚Äôs kind of focusing you to attend the lecture and jot down the code shown during lecture.",
      "comment_grading": "The hopeless thing about grading is, the TA will type your written code and see if it can be compiled or not.<br /><br />If your code failed to be compiled, congrats you get 0 mark for the question - they don‚Äôt even grade your logic :) but the programming language they asked in the exam is mainly focusing on logic lol<br /><br />They haven‚Äôt release the grade but what I will wanna say is that, the grading scheme of assignment and exam is reli shit, don‚Äôt expect so much for the grading",
      "comment_workload": "The assignment is quite hard and you actually need so much time on doing the assignment",
      "rating_content": 2,
      "rating_teaching": 4,
      "rating_grading": 1,
      "rating_workload": 3,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 7,
      "vote_count": 10,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "R40uZB3fKeSDlhNQtyztPkDTOX5tZxtv",
      "semester": "2020-21 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "JimmyLeung1998",
      "date": "Dec 16, 2020",
      "title": "Good course, esp in the age of online learning",
      "comment_content": "First of all, NO FINAL EXAMS DURING PANDEMIC. This totally turns the course into an assignment-based learning one, BUT, in programming assignment 2,3, we have some subsequent pop-up quizzes requiring us to give sketches on like parsing tree and execution flow, which is not too difficult as compared to the exams. <br /><br />I think overall before starting on this course, you should have some background knowledge.<br />- data structure, c/c++ programming, hardcore recursion [COMP2012]<br />- relations, perhaps some algorithms (COMP2711/3711)<br />- scheduling, synchronization, threads (COMP3511 and/or COMP3021)<br />[..] refers to prerequisites, and (...) refers to prerequisites or corequisites. Interested students are strongly encouraged to study similar topics at the same time at different courses to gain more perspective.<br /><br />Anyway in the following I would briefly talk about mainly the assignment topics, but not those which would only come up in the exam questions.<br /><br />For conciseness I shall use the following header notation for each assignment topic.<br />&nbsp;&nbsp;{{ number }}. {{ topic }} - {{ Language }} <br /><br />1. Functional Programing - Sml<br />If you have previous experience in es6 nodejs or python functional programming, it would be easy for you. The only trouble is you would have to get into a old-school weird SML language in the assignment. This year the sml pa is associated with a in-class demo.<br /><br />2. Program (Source code) parsing - Flex, Bison<br />This topic is about parsing a &quot;statement&quot; in a typical program. From simple examples like &quot;1 + 2&quot; to &quot;1 + 2 * (3 - 4) / 5&quot;, you would be taught how to translate such statements, by setting up a set of proper interpretation rules (grammar) with appropriate syntax units and operators (tokens), together with the consideration on like associativity and precedence issue. Btw just in case you wanna get involved with more theoretical material about grammar, you could take another course COMP3721 which is also a fun one :) Assignment on this topic in this semester is also easy. This year the flex-bison pa is associated with a in-class quiz.<br /><br />3. Logical Programming - Prolog<br />It is like SQL, but not exactly the same. In this topic you completely switch your mind from variables and functions into relations. So instead of &quot;f(input) { return result; }&quot;, you would be thinking how to write &quot;f(input, result) :- ...&quot;. Btw this is not supposed to be a difficult topic, I mean most people take this course as elective in year 3 or year 4, with probably their first course on discrete math on previous semester already. BUT, assignment in this year is extremely tough. And after two-week efforts we get another &quot;simple&quot; in-class quiz :)<br /><br />4. Concurrent Programming - Cuda<br />As I am told, this topic in usual circumstance is taken as extra topic and hence would not appear in programming assignment typically. But here we are :) In this part you would trained into thinking in a way that, tasks on large array can be separated, so that each of your computer processors can share some workload, instead of one single program running one single large array data in a slow sequential manner. This is particularly similar to the idea of &quot;map&quot; in functional programming. I mean once you realize this, the labs / assignment somehow becomes easier for one to tackle. The programming assignment comes with a graded presentation.<br /><br /><br />Learning material:<br />SML: Chapter 1-9, 11 (about 100 pages) at http://www.cs.cmu.edu/~rwh/isml/ <br />Flex-bison: First three chapters at https://web.iitd.ac.in/~sumeet/flex__bison.pdf<br />Prolog: Functional helper doc at https://www.swi-prolog.org/pldoc/man?section=libpl<br />Cuda: Official site at https://developer.nvidia.com/CUDA-zone",
      "comment_teaching": "Lecture: <br />Good teaching even in online mode. But 9am lect cause me skipped most class :)<br /><br />Lab:<br />Totally not helpful!! Do not hope to get a satisfied answer for the lab material from the TAs. Prof sometimes is at the lab, but as the lab is basically a 10-20 min teaching + 40-50 min lab work (graded), she actually couldn&#039;t help much. But if you skip lectures a lot you may want to check the lab codes when doing assignment to (re)learn the stuff you need.",
      "comment_grading": "10% lab <br />- 1% for each, <br />- Cannot get more than 10% even you attend all 12-13 labs<br />- Partial mark would be given in case you cannot finish on time.<br />- In a way, its quite rushy (chur i mean)<br /><br />20% sml assignment<br />- 10% code + 10% demo<br />- Easy to medium<br /><br />20% flex-bison assignment<br />- 10% code + 10% quiz (parse tree drawing)<br />- Easy<br /><br />20% prolog assignment<br />- 10% code + 10% quiz (program trace drawing)<br />- Tough<br /><br />20% cuda assignment<br />- 10% code + 10% presentation<br />- Medium to tough<br /><br />10% final presentation<br /><br />Will update if my final grade is not too bad :) and if later I have further info on the final grade distribution",
      "comment_workload": "Quite heavy. In case you are taking it in online semester, plz be ready for the assignment workload. But absolute grading + manageable assignment does help your grade in case you can work very hard. <br /><br />Btw even for the toughest assignment (in this semester is prolog), there would still be students getting full marks on the programming assignment :) So if you have friends, you may wanna take the course with them, and help each other more on the assignment problems, given that the course is having absolute grading. DISCLAIMER: No direct cheating or plagiarism is encouraged here. <br /><br />Prof is often willing to extend deadline for assignments, so in a way weaker students are still somewhat able to get high marks.<br /><br />One thing is, you need to use cse remote linux to do the assignment (esp the cuda&#039;s one), and school devices (even in a virtual sense) are as always not that efficient :) I would suggest interested students should pick up some unix terminal skills and have their filezilla ready before rushing into this course. Otherwise you would be literally on fire when you choose to rush for your assignment with sloppy file syncing skills btw local and remote machine.<br /><br />(For sure for remote file syncing, you can always use terminal tools like scp or rsync, but I am told that COMP3511 students are taught with slow filezilla so ...)",
      "rating_content": 5,
      "rating_teaching": 4,
      "rating_grading": 4,
      "rating_workload": 2,
      "has_midterm": false,
      "has_final": false,
      "has_quiz": true,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": true,
      "has_reading": false,
      "has_presentation": true,
      "upvote_count": 5,
      "vote_count": 5,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "IU78VB1ExVOdvt0XpRfiRXXlYyxD60d7",
      "semester": "2019-20 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "Kelvin Y",
      "date": "Jul 28, 2020",
      "title": "Learn new programming languages and techniques",
      "comment_content": "You basically learn a bunch of different programming languages. It requires you to master recursion for functional programming... I don&#039;t really know how to explain the others but basically you learn different types of programming. <br /><br />I find the course content useful but difficult. If you manage to get a grasp of each language then you can do really well. It&#039;s more about understanding the syntax of each language.",
      "comment_teaching": "She is boring and reads from the lecture notes. I fell asleep without fail every single lesson.<br /><br />When she tries to give examples she sometimes messes up and is pretty slow with them. I&#039;m sure she understands her stuff but she makes mistakes sometimes. We&#039;re all human, but she seems to make more mistakes than other professors I&#039;ve seen.<br /><br />Ask the TAs in the labs for help if you don&#039;t understand anything. Don&#039;t be shy.",
      "comment_grading": "I got a few marks below mean in the midterm (out of 30) but full marks in the final (it was the semester that suddenly switched to online). I really studied hard for the final and made sure I understood all the languages.<br /><br />Got an A in the end, felt nice to redeem myself.",
      "comment_workload": "3 assignments + midterm + final<br /><br />Assignments are based on the language you were taught. So make sure you understand the language&#039;s syntax. It can take some time so make sure you read the lecture notes and understand what each page says.<br /><br />Make sure you don&#039;t make mistakes in your exams. It can get tricky. Redo each question like 5 times to make sure you got it right.<br /><br />I guess it&#039;s a reasonable workload for a programming course.",
      "rating_content": 4,
      "rating_teaching": 4,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 3,
      "vote_count": 4,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "A83VFA4R5d8Yj26nMIVw4AmiykeNCg6B",
      "semester": "2019-20 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "Tommy Li",
      "date": "Dec 19, 2019",
      "title": "The Art of Programming üé®",
      "comment_content": "This course gives an introduction to different programming paradigms (e.g. FP, LP) and some core concepts in programming language design (e.g. grammar and expression, scoping, parameter passing mechanism). For a programming nerd like me (see my COMP 2012H review lol), I truly enjoy the topics.<br /><br />Part of the course is about alternative programming paradigms. You have to wrap you head around. The for loops are gone. They becomes functions and logical relations. How to write a program using functions only? You will be amazed by how weird but fun it is.<br /><br />The other part is programming language design. Although you would not learn how to write a compiler in this course, you will learn some of the components of it. How would a compiler parse your program source file? How can the compiler determine which variable is which? Aside from the mechanisms, you can get a taste building your own little programming language without having to struggle to build a parser from scratch. Flex &amp; Bison are pre-written parser/scanners that you will learn for implementing a language.<br /><br />I always think programming is art. It feels so cool to code up your program in a special and neat way. This course can give your more inspirations on such possibilities. Cited from another review, &quot;anyone loves programming should take this course&quot;.<br /><br />But of course, don&#039;t take this course if you hate programming. lol",
      "comment_teaching": "Luo&#039;s teaching is very clear and detailed. She goes over the materials in a good pace which an average student would be able to follow. She also supplements her teaching with lots of programming examples. Some of the cases are quite inspiring and would make you think more about the language/mechanism. <br /><br />Lecture videos are also provided. They are extremely useful, especially if you cannot pay enough attention in morning classes or get lost during lecture time. However, I suggest attending the lectures because the screen is usually rendered poorly in the videos.<br /><br />The TA reads out the lab materials word by word. Don&#039;t expect too much for the lab. Attending the lecture and trying out the materials by yourself should be sufficient.",
      "comment_grading": "Mean =&gt; A-<br />:O<br /><br />This course deploys absolute grading scheme. If you get every assignment above mean, you will get at least an A- (according to the stats). If you are aiming for A+, there is still some buffer for careless mistakes. The assignments and exams are in general not too difficult that you can perform reasonably good if you follow the course closely. Be careful tho as there are some minor tricky parts that need to be taken with care.<br /><br />Grade mapping:<br />95 and above A+<br />90-94 A<br />85-89 A-<br />80-84 B+<br />75-79 B<br />70-74 B-<br />65-69 C+<br />60-64 C<br />55-59 C-<br />50-54 D<br />(Mapping is from official announcement)<br /><br />Grading components:<br />assignment 1&nbsp;&nbsp;&nbsp;&nbsp;20%<br />assignment 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20%<br />assignment 3&nbsp;&nbsp;&nbsp;&nbsp;20%<br />midterm exam&nbsp;&nbsp;&nbsp;&nbsp;30%<br />online quiz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10%<br />(Please be noted that the weighting differs from previous offerings due to the special circumstance this semester)<br /><br />Score stats and my score (for reference):<br />Assignment 1: 10/10 (mean: 9.4) =&gt; 20/20<br />Assignment 2: 10/10 (mean: 9.1) =&gt; 20/20<br />Assignment 3: 9.6/10 (mean: 8.5) =&gt; 19.2/20<br />Midterm: 96/100 (mean: 79.31, max: 96.00, sd: 15.60) =&gt; 28.8/30<br />Final: 9.5/10 (mean: 7.76, max: 10, sd: 2.39)<br />Overall: 97.5% =&gt; A+",
      "comment_workload": "There are a total of three programming assignments in the course, and nothing more. Each assignment is only a few hours work if you follow the course closely. And, those are programming assignments but not Q&amp;A boring copy &amp; paste.<br /><br />For preparing midterm and final, doing a few years of past papers should secure a reasonably good score. The length of midterm paper is about 1 hour. It won&#039;t cost you too much time for preparing the exams. Three years of past papers are provided in the course website (you don&#039;t even need to spend time petergao/coursehero!).<br /><br />As mentioned, lecture videos are provided so you can learn according to your pace.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 5,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 2,
      "vote_count": 3,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "J8oWiKuNJVtwXLZibYM2ScmwqDUDZlb6",
      "semester": "2017-18 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "Dipsy",
      "date": "Jan 03, 2018",
      "title": "Anyone love programming should take this course, anyone hate being human compiler should not take this",
      "comment_content": "This course is well structured and will teach 5 paradigms of programming languages, most of them you have never heard before, really can test whether you are a good programmer and capable to learn a totally different style of programming language, as everyone is at the same starting line.<br /><br />1. functional programming (SML)<br />&nbsp;&nbsp;&nbsp;&nbsp;programming language cannot use loops, all recursion. <br />2. gramma and expression, language parser<br />&nbsp;&nbsp;&nbsp;&nbsp;(BNF notation + regex + C =&nbsp;&nbsp;Flex and Bison)<br />3. logical programming (prolog)<br />&nbsp;&nbsp;&nbsp;&nbsp;programming using predicates, again no loops.<br />4. procedure activation (C)<br />5. parallele and GPU programming (CUDA)<br /><br />1,2,3 are big topics and the topic of the assignments. <br /><br />midterm covers SML, BNF, and regex, final covers all.<br />Both exams are closed-book, closed-notes<br />the style is very similar to past paper, so doing more past paper can secure your grade",
      "comment_teaching": "Professor teaches very well and has good English. She knows deeply about the topics that she taught, and can explain the details clearly, and when doing human compiler she never skip steps so everyone can understand fully. Her way to accomplish the questions taught in class is the way you can answer the questions in the exam, especially past paper review sections. So attend her lectures can bring you great benefit.<br /><br />LAB is just repeating what is taught in lectures, only useful when giving tips on assignments",
      "comment_grading": "assignment 30%, 10% each<br />midterm 30% <br />final 40%<br /><br />Both exams are closed-book, closed-notes<br />the style is very similar to past paper, so doing more past paper can secure your grade<br /><br />me assignmets 29.5/30, midterm 99/100, final 90.5/100, A+",
      "comment_workload": "not high, all assignments can finish within 6 hours and 2 weeks is given for each assignment<br />most of my revision on exams is done in paper review in class",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 5,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 3,
      "vote_count": 5,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "tJDRuYQt5mhS3sYDvBnzL6NCAw5f8x8a",
      "semester": "2016-17 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "arod920",
      "date": "Jan 26, 2017",
      "title": "",
      "comment_content": "Goes over non-trending programming languages: SML for functional programming, FLEX and BISON to learn about lexers and parsers, and PROLOG for logical programming.<br />Its a brief overview of each language without too much in-depth details and concepts. <br />Though it was interesting learning new languages, it could have been better with more detail.<br />Also briefly covered concurrent programming and GPU programming with CUDA-C with time leftover.<br />Concurrent programming was not covered in the exam this time, but has been in the past.",
      "comment_teaching": "Prof. Luo is extremely kind, speaks good English, and very accommodating to students.<br />She goes over the concepts at a pretty steady and comfortable pace, and is never hesitant to answer any questions.",
      "comment_grading": "Not bad, I would say. <br />3 assignments account for 10% each, midterm 30%, final 40%.<br />Final exam is cumulative, so quite a bit to review and can be sort of cumbersome having to switch between languages in one paper.<br />I don&#039;t know if the grades were given on an absolute or comparative scale, but sufficient work gets you a satisfactory grade, I guess.",
      "comment_workload": "I didn&#039;t feel too burdened with the course workload. The slides themselves are very short, but practice on one&#039;s own initiative is important for this course. <br />There are 3 assignments, which are not very time-consuming.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 5,
      "rating_workload": 4,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 0,
      "vote_count": 1,
      "comment_count": 0,
      "attachments": []
    },
    {
      "hash": "S0ryZMhucnoLNBbvgLXLnw4kdQncHRIc",
      "semester": "2015-16 Fall",
      "instructors": [
        {
          "id": 109,
          "name": "LUO, Qiong",
          "rating": 1
        }
      ],
      "author": "hello",
      "date": "Dec 30, 2015",
      "title": "",
      "comment_content": "Covers functional programming in Standard ML (SML), language parsing in FLEX and BISON, logic programming in PROLOG, and GPU parallel programming in CUDA. The concepts about programming languages include language constructs, grammar representation, program translation and interpretation, storage allocation and run-time organization.",
      "comment_teaching": "Professor is very kind and I love her teaching style. She teaches a bit slow and explains everything in detail. She also encourages student participation in class and asks for students to stop her at anytime if there are questions. <br /><br />She didn&#039;t rush any topics, and will end class early if she finishes covering a topic because she doesn&#039;t want to start a new topic with only a few minutes left in class. <br /><br />She also hosted a review session for midterm and final, which I found very useful.<br /><br />TAs are also very helpful, and the labs are useful. I constantly made appointments with the TA to make sure I understood all the concepts.",
      "comment_grading": "Professor said she did absolute grading (means no curve). <br /><br />30% 3 Assignments (10% each)<br />30% Midterm<br />40% Final",
      "comment_workload": "There were only three assignments, and you&#039;re given about 1-1.5 weeks to complete it. Assignments were doable in the time frame, and professor encourages students to go to her or TAs if they need help.",
      "rating_content": 5,
      "rating_teaching": 5,
      "rating_grading": 4,
      "rating_workload": 5,
      "has_midterm": true,
      "has_final": true,
      "has_quiz": false,
      "has_assignment": true,
      "has_essay": false,
      "has_project": false,
      "has_attendance": false,
      "has_reading": false,
      "has_presentation": false,
      "upvote_count": 1,
      "vote_count": 2,
      "comment_count": 0,
      "attachments": []
    }
  ]
}